package {{.PackageName}}

import (
	"context"
	"encoding/json"

	"github.com/stefanprifti/gqlclient"
)

type Client struct {
	URL       string
	gqlclient *gqlclient.Client
}

func NewClient(url string) *Client {
	return &Client{
		URL: url,
		gqlclient: gqlclient.New(gqlclient.Options{
			Endpoint: url,
		}),
	}
}

{{range .Methods}}
func (c *Client) {{.Name}}(ctx context.Context, req *{{.Request}}) (*{{.Response}}, error) {
	var resp {{.Response}}

	query := `{{.Query}}`

	reqMap, err := structToMap(req)
	if err != nil {
		return nil, err
	}

	{{if eq .Type "query"}}
	err = c.gqlclient.Query(ctx, query, reqMap, &resp)
	{{else}}
	err = c.gqlclient.Mutation(ctx, query, reqMap, &resp)
	{{end}}
	if err != nil {
		return nil, err
	}

	return &resp, nil
}
{{end}}

func structToMap(s interface{}) (map[string]interface{}, error) {
	m := make(map[string]interface{})
	b, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(b, &m)
	if err != nil {
		return nil, err
	}
	return m, nil
}